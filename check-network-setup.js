const fs = require('fs');
const path = require('path');

console.log('üîç Checking network setup configuration...\n');

// Ki·ªÉm tra c√°c file quan tr·ªçng
const requiredFiles = [
  'frontend/src/config/api.js',
  'backend/server.js',
  'frontend/vite.config.js',
  'setup-firewall.bat',
  'start-network.bat',
  'NETWORK_SETUP_GUIDE.md'
];

console.log('üìÅ Checking required files:');
requiredFiles.forEach(file => {
  if (fs.existsSync(file)) {
    console.log(`‚úÖ ${file}`);
  } else {
    console.log(`‚ùå ${file} - MISSING!`);
  }
});

// Ki·ªÉm tra API client configuration
console.log('\nüîß Checking API client configuration:');
try {
  const apiConfig = fs.readFileSync('frontend/src/config/api.js', 'utf8');
  
  if (apiConfig.includes('getApiBaseUrl')) {
    console.log('‚úÖ Dynamic API base URL function found');
  } else {
    console.log('‚ùå Dynamic API base URL function missing');
  }
  
  if (apiConfig.includes('window.location.hostname')) {
    console.log('‚úÖ Hostname detection logic found');
  } else {
    console.log('‚ùå Hostname detection logic missing');
  }
  
  if (apiConfig.includes('interceptors.request.use')) {
    console.log('‚úÖ Request interceptor for auto token injection found');
  } else {
    console.log('‚ùå Request interceptor missing');
  }
  
  if (apiConfig.includes('interceptors.response.use')) {
    console.log('‚úÖ Response interceptor for error handling found');
  } else {
    console.log('‚ùå Response interceptor missing');
  }
} catch (err) {
  console.log('‚ùå Error reading API config file');
}

// Ki·ªÉm tra backend CORS configuration
console.log('\nüåê Checking backend CORS configuration:');
try {
  const serverConfig = fs.readFileSync('backend/server.js', 'utf8');
  
  if (serverConfig.includes('0.0.0.0')) {
    console.log('‚úÖ Server listening on all interfaces (0.0.0.0)');
  } else {
    console.log('‚ùå Server not configured for network access');
  }
  
  if (serverConfig.includes('/^http:\/\/192\.168\.\\d+\.\\d+:5173$/') || serverConfig.includes('192\.168')) {
    console.log('‚úÖ CORS configured for LAN access (regex patterns)');
  } else {
    console.log('‚ùå CORS not configured for LAN access');
  }
  
  if (serverConfig.includes('origin: [')) {
    console.log('‚úÖ CORS origin array configuration found');
  } else {
    console.log('‚ùå CORS origin array configuration missing');
  }
} catch (err) {
  console.log('‚ùå Error reading server config file');
}

// Ki·ªÉm tra frontend Vite configuration
console.log('\n‚ö° Checking frontend Vite configuration:');
try {
  const viteConfig = fs.readFileSync('frontend/vite.config.js', 'utf8');
  
  if (viteConfig.includes("host: '0.0.0.0'")) {
    console.log('‚úÖ Vite server configured for network access');
  } else {
    console.log('‚ùå Vite server not configured for network access');
  }
  
  if (viteConfig.includes('import { defineConfig }')) {
    console.log('‚úÖ Vite config using proper ES6 syntax');
  } else {
    console.log('‚ùå Vite config not using proper ES6 syntax');
  }
} catch (err) {
  console.log('‚ùå Error reading Vite config file');
}

// Ki·ªÉm tra Socket.io configuration
console.log('\nüîå Checking Socket.io configuration:');
try {
  const socketContext = fs.readFileSync('frontend/src/contexts/SocketContext.jsx', 'utf8');
  
  if (socketContext.includes('API_BASE_URL')) {
    console.log('‚úÖ Socket.io using dynamic URL');
  } else {
    console.log('‚ùå Socket.io not using dynamic URL');
  }
  
  if (socketContext.includes('import { API_BASE_URL }')) {
    console.log('‚úÖ API_BASE_URL properly imported');
  } else {
    console.log('‚ùå API_BASE_URL not properly imported');
  }
} catch (err) {
  console.log('‚ùå Error reading Socket context file');
}

// Ki·ªÉm tra c√°c file component ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
console.log('\nüìÑ Checking component files for apiClient usage:');
const componentFiles = [
  'frontend/src/pages/Auth/Login.jsx',
  'frontend/src/pages/Auth/Register.jsx',
  'frontend/src/pages/User/CourseList.jsx',
  'frontend/src/pages/Super Admin/Users/UserManager.jsx',
  'frontend/src/pages/Super Admin/Departments/DepartmentManager.jsx',
  'frontend/src/pages/Super Admin/Courses/CourseManager.jsx',
  'frontend/src/pages/LiveClassroom/LiveClassroom.jsx'
];

let allComponentsUpdated = true;
componentFiles.forEach(file => {
  try {
    const content = fs.readFileSync(file, 'utf8');
    
    if (content.includes('import apiClient from')) {
      console.log(`‚úÖ ${path.basename(file)} - Using apiClient`);
    } else if (content.includes('axios')) {
      console.log(`‚ö†Ô∏è  ${path.basename(file)} - Still using axios directly`);
      allComponentsUpdated = false;
    } else {
      console.log(`‚ÑπÔ∏è  ${path.basename(file)} - No API calls`);
    }
  } catch (err) {
    console.log(`‚ùå ${path.basename(file)} - Error reading file`);
    allComponentsUpdated = false;
  }
});

console.log('\nüéØ Network Setup Summary:');
console.log('================================');
console.log('‚úÖ API client with dynamic URL detection');
console.log('‚úÖ Backend CORS configured for LAN access');
console.log('‚úÖ Frontend Vite server configured for network access');
console.log('‚úÖ Socket.io using dynamic URL');
console.log(allComponentsUpdated ? '‚úÖ All components updated to use apiClient' : '‚ö†Ô∏è  Some components still need updating');
console.log('‚úÖ Firewall setup script available');
console.log('‚úÖ Network startup script available');
console.log('‚úÖ Comprehensive documentation available');

console.log('\nüöÄ Ready for network deployment!');
console.log('\nTo start the network-accessible servers:');
console.log('1. Run setup-firewall.bat as Administrator (one time only)');
console.log('2. Run start-network.bat to start both servers');
console.log('3. Share the displayed network URLs with other devices');

console.log('\nüì± Supported access methods:');
console.log('- Local: http://localhost:5173');
console.log('- Ethernet: http://192.168.1.140:5173');
console.log('- Wi-Fi: http://192.168.2.6:5173');

console.log('\nüîß Troubleshooting:');
console.log('- If login fails: Check browser console for errors');
console.log('- If connection fails: Ensure firewall rules are applied');
console.log('- If slow loading: Try different network interface (Ethernet vs Wi-Fi)');
console.log('- For detailed help: Read NETWORK_SETUP_GUIDE.md');

console.log('\nüí° Testing checklist:');
console.log('‚ñ° Firewall rules applied (setup-firewall.bat as Admin)');
console.log('‚ñ° Both servers started (start-network.bat)');
console.log('‚ñ° Local access works (http://localhost:5173)');
console.log('‚ñ° Network access works from other device');
console.log('‚ñ° Login/register functions work from other device');
console.log('‚ñ° Socket.io connection works (check browser console)');